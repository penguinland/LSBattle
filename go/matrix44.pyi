# cython: profile=False
#cimport cython
#from libc.math cimport sqrt, sin, cos

import typing as t

from go.vector3 import Vector3, vec3_from_floats
from go.vector4D import Vector4D, vec4_from_floats


pi: float


class Matrix44:
    def __init__(self, m:t.Optional[list[float]]): ...

    def _get_row_1(self) -> Vector3: ...
    def _set_row_1(self, values: list[float]) -> None: ...

    def _get_row_2(self) -> Vector3: ...
    def _set_row_2(self, values: list[float]): ...

    def _get_row_3(self) -> Vector3: ...
    def _set_row_3(self, values: list[float]): ...

    """
    _row1 = property(_get_row_1, _set_row_1, None, "Row 1")
    _row2 = property(_get_row_2, _set_row_2, None, "Row 2")
    _row3 = property(_get_row_3, _set_row_3, None, "Row 3")

    right     = _row1
    up        = _row2
    forward   = _row3
    """

    def copy(self) -> Matrix44: ...
    __copy__ = copy

    @classmethod
    def x_rotation(cls, angle: float) -> Matrix44: ...

    @classmethod
    def y_rotation(cls, angle: float) -> Matrix44: ...

    @classmethod
    def z_rotation(cls, angle: float) -> Matrix44: ...

    @classmethod
    def scale(cls, scale: float) -> Matrix44: ...

    def __mul__(self, rhs: Matrix44) -> Matrix44: ...
    def __imul__(self, rhs: Matrix44) -> Matrix44: ...

    def get_inverse_rot(self) -> Matrix44: ...

    def rotate(self, v: Vector3) -> None: ...

    def get_rotate(self, v: list[float]) -> list[float]: ...

    def get_rotate_v3(self, v: list[float]) -> Vector3: ...

    # TODO: make this return None
    def transform(self, v: Vector4D) -> int: ...

    def get_transform(self, v: list[float]) -> Vector4D: ...

    def get_transform_lis3(self, v: list[float]) -> list[float]: ...

    def to_opengl(self) -> list[float]: ...

    def to_glsl(self) -> list[float]: ...

    def get_gamma(self) -> float: ...

def Lorentz(u: Vector4D) -> Matrix44: ...
