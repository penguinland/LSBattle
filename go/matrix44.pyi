from typing import Optional

from go.vector3 import Vector3
from go.vector4D import Vector4D


pi: float


class Matrix44:
    def __init__(self, m: Optional[list[float]]): ...

    right: list[float]
    up: list[float]
    forward: list[float]

    def copy(self) -> Matrix44: ...
    __copy__ = copy

    @classmethod
    def x_rotation(cls, angle: float) -> Matrix44: ...

    @classmethod
    def y_rotation(cls, angle: float) -> Matrix44: ...

    @classmethod
    def z_rotation(cls, angle: float) -> Matrix44: ...

    @classmethod
    def scale(cls, scale: float) -> Matrix44: ...

    def __mul__(self, rhs: Matrix44) -> Matrix44: ...
    def __imul__(self, rhs: Matrix44) -> Matrix44: ...

    def get_inverse_rot(self) -> Matrix44: ...

    def rotate(self, v: Vector3) -> None: ...

    def get_rotate(self, v: list[float]) -> list[float]: ...

    def get_rotate_v3(self, v: list[float]) -> Vector3: ...

    # TODO: make this return None
    def transform(self, v: Vector4D) -> int: ...

    def get_transform(self, v: list[float]) -> Vector4D: ...

    def get_transform_lis3(self, v: list[float]) -> list[float]: ...

    def to_opengl(self) -> list[float]: ...

    def to_glsl(self) -> list[float]: ...

    def get_gamma(self) -> float: ...

def Lorentz(u: Vector4D) -> Matrix44: ...
